import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from crewai import Agent, Task, Crew
from langchain_groq import ChatGroq
from crewai_tools import tool
import io
import os
import sys


# Define the Code Executor to run the generated Python code
@tool("Execute Python code and capture output")
def execute_code(code: str) -> str:
    """
    Execute the provided Python code and capture the output.
    """
    print("Executing the following code:")
    try:
        output = io.StringIO()  # Capture the output
        original_stdout = sys.stdout
        sys.stdout = output
        exec(code)
        captured_output = output.getvalue()
        sys.stdout = original_stdout
        print("Code executed successfully")
        return captured_output
    except Exception as e:
        sys.stdout = original_stdout
        return str(e)

# API Key for ChatGroq
groq_api = "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"
llm = ChatGroq(temperature=0, model_name="llama-3.1-70b-versatile", api_key=groq_api)


def initialize_agents():
    user_analysis_agent = Agent(
    role="User Analysis Agent",
    goal="Generate Python code for data analysis based on the user's prompt. The prompt will specify the type of analysis required, and you will generate code to perform the analysis on the data (available in the pandas dataframe 'df'). Save any charts in the 'charts_output' folder and name them appropriately.",
    backstory="You are an expert in Python data analysis and visualization. You respond to user requests for specific analysis tasks, generating and executing the required code.",
    llm=llm,
    allow_delegation=False,
    tools=[execute_code],
    verbose=True
    )

    # Define Task for User Prompted Analysis
    user_analysis_task = Task(
        description="""
        Based on the user prompt: {user_prompt}, generate Python code to perform the requested analysis on the dataframe which has colunms {col_names} . 
        Ensure that if any charts required to plot they are saved in the 'charts_output' folder with names that reflect the analysis type. 
        Never plot the actual chart in the code just save it in the folder and also write the code which prints the distribution or points which can be seen in the chart and print them.
        If the prompt involves specific columns, ensure the code uses those columns from the pandas dataframe 'df'.
        
        The code should start like this:
        import pandas as pd
        import matplotlib.pyplot as plt
        import seaborn as sns
        df = pd.read_csv("{file_path}")
        
        also make sure that the code should have follow the dtypes of the columns in the dataframe {dtypes} so that code does not give error and code should be as simple as possible with minimmum number of steps.
        """,
        expected_output="Python code for performing the requested analysis.",
        agent=user_analysis_agent,
        async_execution=False
    )
    code_executor = Agent(
        role="Code Executor",
        goal="Execute the generated Python code and return the results.",
        backstory="You execute Python code and return the results. Your task is to run code and capture its output.",
        llm=llm,  # This agent doesn't need an LLM
        allow_delegation=False,
        tools=[execute_code],
        verbose=True
    )

    # Define Agent 4: Results Compiler
    results_compiler = Agent(
        role="Results Compiler",
        goal="Compile and synthesize the results from the various analyses performed.",
        backstory="You compile and interpret the results from different analyses to provide a comprehensive summary.",
        llm=llm,
        allow_delegation=False,
        tools=[],
        verbose=True
    )
    # Define the Code Execution Task
    code_execution_task = Task(
        description="""
        Once you execute the code and get results do not use it again .
        Execute the generated Python code from the user analysis agent. Ensure any charts if any are saved in the 'charts_output' folder with names reflecting the analysis performed. 
        give the results and file paths of any saved charts.
        
        """,
        expected_output="Execution results and file paths of saved charts. and also the data in text format so that it can be used in the next task",
        agent=Agent(
            role="Code Executor",
            goal="Execute Python code and save charts if any with proper names as specified by the analysis code.",
            backstory="You run code generated by the User Analysis Agent and return results or charts.",
            tools=[execute_code],
            llm=llm,
            verbose=True
        ),
        async_execution=False
    )

    # Define Results Compilation Task (if needed)
    results_compilation_task = Task(
        description="""
        The code was executed successfully. Compile the results and reference the charts by their names in the summary.
        also at the end write string CHARTS: and then write the file paths of the charts that were saved if any.
        Once you make the summary return the output as it is you do not need to do anything else.
        """,
        expected_output="Summary of the analysis and file paths for the charts.",
        agent=Agent(
            role="Results Compiler",
            goal="Compile results and reference charts by their names in the summary.",
            backstory="You compile and interpret the results and provide a user-friendly summary.",
            llm=llm,
            verbose=True
        ),
        async_execution=False
    )
    
    return Crew(agents=[user_analysis_agent, code_executor, results_compiler], tasks=[user_analysis_task, code_execution_task, results_compilation_task],verbose=2)


def get_user_respose(user_input,file_path):
    cols = ""
    df = pd.read_csv(file_path)
    for col in df.columns:
        cols += col + ", "
    dtypes = df.dtypes.astype(str)
    input_data = {"col_names":cols,"user_prompt":user_input,"file_path":file_path,"dtypes":dtypes}
    crew = initialize_agents()
    results = crew.kickoff(input_data)
    results = results.split("CHARTS:")
    charts = results[1].split(" ")
    return results[0],charts